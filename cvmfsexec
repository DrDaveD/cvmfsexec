#!/bin/bash
# Mount cvmfs repository in a user namespace and change to that space.
# Requires being able to run fusermount and unshare -rm.
# Can be used recursively to add additional mounted repositories by
#   executing with $CVMFSEXEC.
# Written by Dave Dykstra September 2019

VERSION=1.1

usage()
{
    echo "Usage: cvmfsexec [-v] [repo ...] -- [command]" >&2
    echo "       -v:   print current version and exit" >&2
    exit 1
}

export CVMFSEXEC_REPOS
parserepos()
{
    if [ "$1" != "--" ]; then
        while getopts "v" OPTION; do
            case $OPTION in
                v)  echo "$VERSION"
                    exit
                    ;;
                ?)  shift $(($OPTIND-2))
                    usage
                    ;;
            esac
        done
        shift $(($OPTIND-1))
    fi

    REPOS=""
    NSHIFT=0
    for ARG; do
        if [ "$ARG" == "--" ]; then
            break
        fi
        if [[ " $CVMFSEXEC_REPOS " != *" $ARG "* ]]; then
            REPOS="$REPOS $ARG"
        fi
        let NSHIFT+=1
    done

    if [ "$ARG" != "--" ]; then
        usage
    fi

    let NSHIFT+=1
}

if [ -n "$CVMFSEXEC_CMDFD" ] && [ -n "$CVMFSEXEC_WAITFIFO" ]; then
    parserepos "$@"

    if [ -z "$REPOS" ]; then
        # No new repositories, just directly exec the command.
        # This avoids adding an extra process in the process tree.
        shift $NSHIFT
        exec "${@:-$SHELL}"
    fi

    # Send command to the "parent" process still outside the namespace.
    # "Parent" is in quotes because the linux process tree gets reversed and
    #   it is actually a linux child.  It is a parent environment-wise though.
    (
    echo CD $PWD
    echo REEXEC $#
    for ARG; do
        echo "$ARG"
    done
    )>&$CVMFSEXEC_CMDFD
    trap "" 1 2 3 15  # ignore ordinary signals
    # wait until that process exits
    read X <$CVMFSEXEC_WAITFIFO
    exit 0
fi

HERE="`dirname $0`"
if [ "$HERE" = "." ]; then
    HERE=$PWD
fi

MOUNTS="$(mount|awk '{print $3}')"

TMPDIR=$(mktemp -d)
trap "rm -rf $TMPDIR" 0
CMDFIFO1=$TMPDIR/cmd1
WAITFIFO1=$TMPDIR/wait1
CMDFIFO2=$TMPDIR/cmd2
WAITFIFO2=$TMPDIR/wait2

# hold this pipe open until we exit, for child cvmfsexec processes to wait on
mkfifo $WAITFIFO1
#to allow the pipe open-write to proceed, first open it in a throw-away process
(<$WAITFIFO1) &
exec {WAITFD}>$WAITFIFO1
export CVMFSEXEC_WAITFIFO=$WAITFIFO1

doexec()
{
    parserepos "$@"
    shift $NSHIFT

    ORIGPWD=$PWD
    cd $HERE

    # Add the config repo if not already asked for
    CONFIG_REPO="`grep '^CVMFS_CONFIG_REPOSITORY=' $HERE/dist/etc/cvmfs/default.d/*.conf 2>/dev/null|tail -1|sed 's/^CVMFS_CONFIG_REPOSITORY=//'`"
    if [[ " $REPOS " != *" $CONFIG_REPO "* ]] &&
            [[ " $CVMFSEXEC_REPOS " != *" $CONFIG_REPO "* ]]; then
        REPOS="$CONFIG_REPO $REPOS"
    fi

    # mount the repos
    for REPO in $REPOS; do
        if ./mountrepo $REPO; then
            # put new one at the beginning so config repo will
            #   be unmounted last
            CVMFSEXEC_REPOS="$REPO $CVMFSEXEC_REPOS"
        else
            RET="$?"
            for REPO in $CVMFSEXEC_REPOS; do
                ./umountrepo $REPO
            done
            exit $RET
        fi
    done {WAITFD}>&-

    cd $ORIGPWD

    rm -f $CMDFIFO1 $CMDFIFO2 $WAITFIFO2
    mkfifo $CMDFIFO1 $CMDFIFO2 $WAITFIFO2
    # make a copy of stdin fd, for use in '&' and by unshare later
    exec {STDINCOPYFD}<&0
    (
    trap "" 1 2 3 15  # ignore ordinary signals
    # read from user namespace process and write to fakeroot process
    while read -u $CMDINFD CMD PARAM; do
        if [ "$CMD" == CD ]; then
            cd "$PARAM"
            continue
        elif [ "$CMD" != REEXEC ]; then
            continue
        fi
        N=$PARAM
        # read the $N parameters into an array
        PARAMS=()
        while [ $N -gt 0 ]; do
            read -u $CMDINFD LINE
            PARAMS+=("$LINE")
            let N-=1
        done
        trap 1 2 3 15 # restore ordinary signals
        # start a new subprocess and turn this process into the
        #  new user command
        doexec "${PARAMS[@]}" {CMDINFD}<&-
        exit $?
    done <&$STDINCOPYFD {STDINCOPYFD}<&- {CMDINFD}<$CMDFIFO1
    # do unmounts and cleanup after user command exits
    cd $HERE
    for REPO in $CVMFSEXEC_REPOS; do
        if [ "$REPO" == "$CONFIG_REPO" ]; then
            # give a little extra time for the others to exit
            sleep 1
        fi
        ./umountrepo $REPO >/dev/null
    done
    rm -rf $TMPDIR
    ) &

    # close the waitfd, leaving it only for the background process
    exec {WAITFD}>&-

    rm -rf $HERE/mnt

    export STDINCOPYFD

    # Note that within the here document, unprotected $ substitutions are
    #  done by the surrounding shell, and \$ is within the command
    exec unshare -rm $SHELL /dev/stdin "${@:-$SHELL}" <<!EOF-1!
        mkdir -p $HERE/mnt
        mount --rbind $HERE/mnt $HERE/mnt # pivot_root requires this mountpoint
        mkdir -p $HERE/mnt/cvmfs
        mount --rbind $HERE/dist/cvmfs $HERE/mnt/cvmfs # add any pre-mounts
        ( 
        trap "" 1 2 3 15  # ignore ordinary signals
        while read CMD PARAM; do
            if [ "\$CMD" != PID ]; then
                continue
            fi
            # set up uid/gid map
            echo "\$(awk '{print \$2; exit}' /proc/self/gid_map) 0 1" >/proc/"\$PARAM"/gid_map
            echo "\$(awk '{print \$2; exit}' /proc/self/uid_map) 0 1" >/proc/"\$PARAM"/uid_map
            echo "ready" >$WAITFIFO2
        done <$CMDFIFO2
        ) &

        # implement "underlay" for all but /cvmfs
        for ROOTFILE in /.??* /*; do
            if [ "\$ROOTFILE" == "/.??*" ] || [ "\$ROOTFILE" == "/cvmfs" ]; then
                continue
            fi
            TARG=$HERE/mnt/\$ROOTFILE
            if [ -L \$ROOTFILE ]; then
                ln -s \$(readlink -f \$ROOTFILE) \$TARG
            elif [ -d \$ROOTFILE ]; then
                mkdir -p \$TARG
                if echo "$MOUNTS"|grep -q "^\$ROOTFILE"; then
                    mount --rbind \$ROOTFILE \$TARG
                else
                    mount --bind \$ROOTFILE \$TARG
                fi
            else
                touch \$TARG
                mount --bind \$ROOTFILE \$TARG
            fi
        done

        cd $HERE/mnt
        mkdir -p .old-root
        pivot_root . .old-root
        cd $ORIGPWD

        export CVMFSEXEC_CMDFD

        # quoting the here document's delimeter makes this nested shell not
        #  interpret $ substitutions, but the previous one still does
        exec unshare -U $SHELL /dev/stdin "\$@" {CVMFSEXEC_CMDFD}>$CMDFIFO1 <<'!EOF-2!'
            echo "PID \$$" >$CMDFIFO2
            read X <$WAITFIFO2
            export -n STDINCOPYFD
            export CVMFSEXEC="exec $HERE/cvmfsexec"
            exec "\$@" <&\$STDINCOPYFD {STDINCOPYFD}<&-
!EOF-2!

!EOF-1!
}

trap 0 # delegate cleanup of the TMPDIR to the watchdog
doexec "$@"
